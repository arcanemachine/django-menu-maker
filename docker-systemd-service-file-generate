#!/bin/bash

cd $(dirname "$0")

# use the name of the project directory as the name of the service
service_name=$(basename $(pwd))
service_file="/etc/systemd/system/$service_name.service"

if [ "$1" == "--help" ] || [ "$1" == "-h" ]; then
  echo "This script generates a systemd service file.
The output should be sent here: '$service_file'

To enable this service:
  - sudo systemctl enable $service_name.service

To start this service:
  - sudo systemctl start $service_name.service"
fi

# require SERVER_ENVIRONMENT to be set
if [ "$SERVER_ENVIRONMENT" == "" ]; then
  if [ "$1" == "dev" ] || [ "$1" == "test" ] || [ "$1" == "prod" ]; then
    SERVER_ENVIRONMENT=$1
  elif [ "$1" != "" ]; then
    echo "SERVER_ENVIRONMENT must be one of: dev, test, prod"
    exit 1
  else
    echo "SERVER_ENVIRONMENT must be one of: dev, test, prod"
    echo "You must set it or pass the desired environment as the first argument."
    exit 1
  fi
fi

echo "[Unit]
Description=$service_name
Requires=docker.service
After=docker.service

[Service]
Restart=always
User=root
Group=docker
WorkingDirectory=$(pwd)

# Shutdown container (if running) when unit is started
ExecStartPre=$(which docker-compose) -f docker-compose.yml -f docker-compose.$SERVER_ENVIRONMENT.yml down

# Start container when unit is started
ExecStart=$(which docker-compose) -f docker-compose.yml -f docker-compose.$SERVER_ENVIRONMENT.yml up --remove-orphans

# Stop container when unit is stopped
ExecStop=$(which docker-compose) -f docker-compose.yml -f docker-compose.$SERVER_ENVIRONMENT.yml down

[Install]
WantedBy=multi-user.target"
